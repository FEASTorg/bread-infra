name: Publish KiBot docs

on:
  workflow_call:
    inputs:
      kibot_run_id:
        description: "Run ID from KiBot CI to fetch artifacts"
        required: true
        type: string
    outputs:
      kibot_index_sha:
        description: "Commit SHA containing the latest KiBot index"
        value: ${{ jobs.generate-kibot-index.outputs.commit_sha }}

permissions:
  contents: write

concurrency:
  group: gen-kibot-index
  cancel-in-progress: true

jobs:
  generate-kibot-index:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.record-sha.outputs.commit_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Sync to latest main
        run: |
          git fetch origin main
          git checkout -B main origin/main

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python deps
        run: pip install markdown2 pyyaml

      - name: Download KiBot artifact (for assets + index)
        uses: actions/download-artifact@v5
        with:
          name: kibot-site
          path: _kibot_art
          repository: ${{ github.repository }}
          run-id: ${{ inputs.kibot_run_id }}

      - name: Resolve artifact list & project from config (handles globs + case)
        id: resolve
        run: |
          python3 - <<'PY'
          import os, yaml, fnmatch
          ROOT = "_kibot_art"
          cfg = yaml.safe_load(open("docs/kibot/config.kibot.site.yml"))
          pats = cfg.get("artifacts", []) or []
          # tolerant alternates for iBOM naming
          ibom_alts = ["BoM/*_iBoM.html", "BoM/*ibom.html", "*_iBoM.html", "*ibom.html"]
          if not any("ibom" in p.lower() for p in pats):
              pats += ibom_alts

          files = []
          for r,_,fs in os.walk(ROOT):
            for f in fs:
              files.append(os.path.relpath(os.path.join(r,f), ROOT))

          def match(pat, rel):
            return (fnmatch.fnmatch(rel, pat) or
                    fnmatch.fnmatch(rel.lower(), pat.lower()) or
                    fnmatch.fnmatch(os.path.basename(rel), pat) or
                    fnmatch.fnmatch(os.path.basename(rel).lower(), pat.lower()))

          found = []
          seen = set()
          for pat in pats:
            ms = [f for f in files if match(pat, f)]
            if ms:
              ms.sort(key=lambda s:(len(s), s))
              base = os.path.basename(ms[0])
              if base.lower() not in seen:
                seen.add(base.lower())
                found.append(base)

          core = ["Schematic.pdf", "PCB.pdf", "kibot.log"]
          final = [x for x in core if x in found] + [x for x in found if x not in core]

          with open(os.environ["GITHUB_OUTPUT"], "a") as g:
            g.write(f"list={','.join(final)}\n")
            g.write(f"project={cfg.get('project_name','')}\n")
          PY

      - name: Generate docs/kibot/index.md
        run: |
          python scripts/generate_kibot_index.py \
            --template docs/kibot/index_template.md \
            --out-md docs/kibot/index.md \
            --project "${{ steps.resolve.outputs.project }}" \
            --artifacts "${{ steps.resolve.outputs.list }}"

      - name: Read image list from config
        id: cfg
        run: |
          python3 - <<'PY'
          import os, yaml
          cfg = yaml.safe_load(open("docs/kibot/config.kibot.site.yml"))
          imgs = cfg.get("images", [])
          with open(os.environ["GITHUB_OUTPUT"], "a") as g:
            g.write("images<<EOF\n")
            g.write("\n".join(imgs))
            g.write("\nEOF\n")
          PY

      - name: Copy board images into repo (docs/assets/boards)
        run: |
          set -euo pipefail
          mkdir -p docs/assets/boards
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            src=$(find _kibot_art -type f -iname "$f" -print -quit || true)
            if [ -n "${src:-}" ]; then
              cp -f "$src" "docs/assets/boards/$f"
              git add "docs/assets/boards/$f"
            else
              echo "WARN: $f not found in artifact" >&2
            fi
          done <<< "${{ steps.cfg.outputs.images }}"

      - name: Commit & push (safe rebase)
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add docs/kibot/index.md || true
          if git diff --cached --quiet; then
            echo "âœ… Nothing to commit."
            exit 0
          fi
          git commit -m "ðŸ“„ KiBot index + board renders (auto)"
          git fetch origin main
          git pull --rebase origin main
          git push origin HEAD:main

      - name: Record SHA
        id: record-sha
        run: echo "commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
